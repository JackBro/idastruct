IDA=../../

PROC=x86emu

EXTRAFLAGS=-DCYGWIN -Os -mno-cygwin
LIBS=-lcomdlg32 -lgdi32 -luser32 -lpsapi
RESOURCES=dialog.res

#
#                Common part of GNU Makefiles for IDA.
#
#--------------------------- Main IDA directory   --------------------------
ifndef IDA
$(error Please set IDA variable! (with a trailing backslash!))
endif

# convert Windows style path to Unix style path
IDAUNIX=$(subst \,/,$(IDA))

############################################################################
#                            From ALLMAKE.MAK                              #
############################################################################
# include and help directories are common for all platforms and compilers:
I=$(IDAUNIX)include/
# libraries directory
L=$(IDAUNIX)libgcc.w32/
# results directory
R=$(IDAUNIX)bin/
# object files directory
F=gcc.w32/
# plugins directory
SUBDIR=plugins/
# PLUGIN extension
PLUGIN=.plw
# object file extension
O=.o
# library file extension
A=.a
# File Remover
RM=rm

IDALIB=$(L)ida$(A)

OBJS=	$(F)x86emu.o \
	$(F)emufuncs.o \
	$(F)memmgr.o \
	$(F)cpu.o \
	$(F)emuheap.o \
	$(F)emustack.o \
	$(F)seh.o \
	$(F)break.o \
	$(F)hooklist.o \
	$(F)buffer.o

BINARY=$(R)$(SUBDIR)$(PROC)$(PLUGIN)

############################################################################
all: $(F) $(BINARY)

clean:
	-@$(RM) $(F)*.o
	-@$(RM) $(F)*.res
	-@$(RM) $(BINARY)

distclean: clean
	-@$(RM) $(F)*
	rmdir $(F)

$(F):
	-@mkdir $(F)

RC=windres

$(F)%.res: %.rc
	$(RC) -O coff $< $@

CC=g++
CFLAGS=-I$(I) -DWIN32 -D__NT__ -D__IDP__ -mrtd $(EXTRAFLAGS)

$(F)%$(O): %.cpp
	$(CC) -c $(CFLAGS) $< -o $@

LD=g++
LDFLAGS=--def ../plugin.def -Wl,--dll -shared -mno-cygwin

$(BINARY): $(F) $(OBJS) $(F)$(RESOURCES)
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(F)$(RESOURCES) $(IDALIB) $(LIBS) 

# MAKEDEP dependency list ------------------
$(F)emufuncs$(O): $(I)ida.hpp $(I)idp.hpp $(I)bytes.hpp $(I)kernwin.hpp \
           $(I)name.hpp $(I)loader.hpp $(I)auto.hpp \
	        emufuncs.cpp emufuncs.h \
	        hooklist.h memmgr.h cpu.h emustack.h emuheap.h \
	        x86defs.h buffer.h

$(F)memmgr$(O): $(I)ida.hpp $(I)idp.hpp $(I)bytes.hpp $(I)kernwin.hpp \
           $(I)name.hpp $(I)loader.hpp $(I)auto.hpp \
	        memmgr.cpp memmgr.h cpu.h emustack.h emuheap.h x86defs.h seh.h \
	        x86defs.h buffer.h

$(F)cpu$(O): $(I)ida.hpp $(I)idp.hpp $(I)bytes.hpp $(I)kernwin.hpp \
           $(I)name.hpp $(I)loader.hpp $(I)auto.hpp \
	        cpu.cpp cpu.h \
	        x86defs.h \
	        memmgr.h emustack.h emuheap.h hooklist.h emufuncs.h seh.h buffer.h

$(F)emuheap$(O): emuheap.cpp emuheap.h buffer.h

$(F)emustack$(O): emustack.cpp emustack.h buffer.h

$(F)seh$(O): $(I)ida.hpp $(I)idp.hpp $(I)bytes.hpp $(I)kernwin.hpp \
           $(I)name.hpp $(I)loader.hpp $(I)auto.hpp \
	        seh.cpp \
	        memmgr.h cpu.h emustack.h emuheap.h x86defs.h seh.h \
	        x86defs.h

$(F)x86emu$(O): $(I)ida.hpp $(I)idp.hpp $(I)bytes.hpp $(I)kernwin.hpp \
           $(I)name.hpp $(I)loader.hpp $(I)auto.hpp \
	        break.h emufuncs.h \
	        memmgr.h cpu.h resource.h x86defs.h emuheap.h \
	        x86emu.cpp seh.h emustack.h \
	        hooklist.h

$(F)break$(O): break.cpp break.h

$(F)hooklist$(O): hooklist.cpp hooklist.h buffer.h

$(F)buffer$(O): buffer.cpp buffer.h